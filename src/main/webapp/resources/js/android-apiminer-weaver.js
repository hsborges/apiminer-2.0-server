/**
 *  APIMiner JavaDoc Weaver - JavaDoc documentation generated by javadoc command
 *  
 *  	This script instruments automatically the JavaDoc documentation. 
 *  Basically, it adds the "Example" button in the list of public methods.
 *  
 */

/**
 * Main method.
 */
function instruments() {
	console.log("Loading: " + apiminer_server_url + '/resources/apiminer-header.html');
	$('.apiminerHeaderDiv').load(apiminer_server_url + '/resources/apiminer-header.html');
	
	console.log("Instrumenting documentation");
	
	var apiClass = $("table.jd-inheritance-table td.jd-inheritance-class-cell").last().text();
	console.log("API Class: " + apiClass);
	
	if (apiClass == null || apiClass == '' || apiClass.indexOf("android") != 0) return;
	
	$("#pubmethods tr, #pubctors tr, #promethods tr").each(function(){
		if ($(this).hasClass("api")) {
			var ebtn = $("<button></button>")
				.addClass("ui-button ui-state-default ui-corner-all ui-button-text-only ui-state-focus")
				.attr("role", "button")
				.attr("aria-disabled", "false")
				.attr("style","height: 2.1em; width: 5.5em;")
				.text("Example");
			
			var espan = $("<span>? Examples</span>");
			
			$(this).prepend($("<td></td>")
					.attr("class","jd-typecol")
					.attr("style","text-align:center; min-width:7em;")
					.append(ebtn)
					.append("<br/>")
					.append(espan));
		}
	});
	
	jQuery.get(
			examples_counter_url,
			{apiClass: apiClass},
			function(data) {
				var obj = jQuery.parseJSON(data);
				
				var api_methods = {};
				
				$("#pubmethods tr, #pubctors tr, #promethods tr").each(function(){
					if ($(this).hasClass("api")) {
						var methodName = $(this).find($("td.jd-linkcol a"))
							.first()
							.attr("href")
							.replace("/reference/","/")
							.replace(/\.\.\//g, "")
							.replace(".html#","/")
							.replace(/\//g, ".")
							.replace("...", "[]");
						
						var method_data = obj.methods[methodName];
						
						if (method_data == undefined || method_data == null) 
							return;
												
						api_methods[methodName] = method_data.method_id;
						
						var ebtn = $("<button></button>")
							.addClass("ui-button ui-state-default ui-corner-all ui-button-text-only ui-state-focus")
							.attr("role", "button")
							.attr("aria-disabled", "false")
							.attr("style","height: 2.1em; width: 5.5em;")
							.text("Example");
						var espan = $("<span></span>");
						
						var num_examples = 0;
						if (method_data != null) {
							num_examples = method_data.num_examples;
						}
						
						if (num_examples != 0) {
							ebtn.click(function() {
								$("span.ui-dialog-title").text(methodName); 
								populate(method_data.method_id, 0, null);
								btnClick(method_data.method_id);
							});
						}
						
						$(this).find("td").first().remove();
						
						$(this).prepend($("<td></td>")
								.attr("class","jd-typecol")
								.attr("style","text-align:center; min-width:7em;")
								.append(ebtn)
								.append("<br/>")
								.append(espan));
						
						espan.text(num_examples + " Examples");
					}
				});
				
				function instruments_details(api_method) {
					jQuery.get(
							patterns_list_url,
							{methodId: api_methods[api_method]},
							function(data) {
								var associated_elements = jQuery.parseJSON(data);
								
								if (associated_elements.length == 0) 
									return;
								
								var selector = $("a[name='" + api_method.replace(apiClass+'.', '') + "']");
								var next = selector.next().find('.jd-details-descr');
								var div = $('<div></div>').addClass('jd-tagdata');
								
								div.append($('<h5></h5>').addClass('jd-tagtitle').text('Frequently called with: '));
								
								var uls = $('<ul></ul>').addClass('nolist');
								div.append(uls);
								
								for (var i = 0; i < associated_elements.length; i++) {
									var licode = $('<li></li>');
									uls.append(licode);
									
									var code = $('<code></code>');
									licode.append(code);
									
									var elements = associated_elements[i]['associatedElements'];
									for (var j = 0; j < elements.length; j++) {
										var sep = elements[j].substring(0, elements[j].indexOf('(')).lastIndexOf('.');
										
										var api_method_url = new Array(apiClass.split('.').length).join('../');
										
										api_method_url += elements[j].substring(0, sep).split('.').join('/').concat('.html#').concat(elements[j].substring(sep+1, elements[j].length));
										
										var aname = $('<a></a>').text(elements[j]+"").attr('href', api_method_url).attr('onClick', 'patternsListClick(' + associated_elements[i]['associatedElementsId'] + ')');
										code.append(aname);
										if (j < elements.length - 1)
											code.append(', ');
									}
									
								}
								
								next.append(div);
							}
					);
				};
				
				for ( var api_method in api_methods) {
					instruments_details(api_method);
				}
			}
	);
	
}